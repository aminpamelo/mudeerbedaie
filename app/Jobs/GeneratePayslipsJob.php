<?php

namespace App\Jobs;

use App\Models\User;
use App\Services\PayslipGenerationService;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;

class GeneratePayslipsJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public array $teacherIds;

    public string $month;

    public int $generatedByUserId;

    public ?string $notificationChannel;

    public function __construct(
        array $teacherIds,
        string $month,
        int $generatedByUserId,
        ?string $notificationChannel = null
    ) {
        $this->teacherIds = $teacherIds;
        $this->month = $month;
        $this->generatedByUserId = $generatedByUserId;
        $this->notificationChannel = $notificationChannel;
        $this->queue = 'payslips';
    }

    public function handle(PayslipGenerationService $service): void
    {
        $generatedBy = User::find($this->generatedByUserId);

        if (! $generatedBy) {
            Log::error('GeneratePayslipsJob: Generated by user not found', [
                'user_id' => $this->generatedByUserId,
            ]);

            return;
        }

        $successCount = 0;
        $errorCount = 0;
        $errors = [];

        Log::info('Starting payslip generation', [
            'teacher_count' => count($this->teacherIds),
            'month' => $this->month,
            'generated_by' => $generatedBy->name,
        ]);

        foreach ($this->teacherIds as $teacherId) {
            try {
                $teacher = User::find($teacherId);

                if (! $teacher) {
                    $errorCount++;
                    $errors[] = "Teacher with ID {$teacherId} not found";

                    continue;
                }

                $payslip = $service->generateForTeacher($teacher, $this->month, $generatedBy);

                $successCount++;

                Log::info('Payslip generated successfully', [
                    'payslip_id' => $payslip->id,
                    'teacher' => $teacher->name,
                    'month' => $this->month,
                    'total_amount' => $payslip->total_amount,
                    'total_sessions' => $payslip->total_sessions,
                ]);

            } catch (\Exception $e) {
                $errorCount++;
                $teacherName = $teacher->name ?? 'Unknown';
                $errors[] = "Failed to generate payslip for {$teacherName}: ".$e->getMessage();

                Log::error('Failed to generate payslip', [
                    'teacher_id' => $teacherId,
                    'teacher_name' => $teacherName,
                    'month' => $this->month,
                    'error' => $e->getMessage(),
                    'trace' => $e->getTraceAsString(),
                ]);
            }
        }

        Log::info('Payslip generation completed', [
            'successful' => $successCount,
            'failed' => $errorCount,
            'total' => count($this->teacherIds),
            'month' => $this->month,
        ]);

        // Send notification if channel is provided
        if ($this->notificationChannel) {
            $this->sendCompletionNotification($successCount, $errorCount, $errors);
        }
    }

    public function failed(\Throwable $exception): void
    {
        Log::error('GeneratePayslipsJob failed completely', [
            'teacher_ids' => $this->teacherIds,
            'month' => $this->month,
            'generated_by_user_id' => $this->generatedByUserId,
            'error' => $exception->getMessage(),
            'trace' => $exception->getTraceAsString(),
        ]);
    }

    private function sendCompletionNotification(int $successCount, int $errorCount, array $errors): void
    {
        // This could be implemented to send real-time notifications
        // For now, we'll just log the completion
        Log::info('Payslip generation notification', [
            'channel' => $this->notificationChannel,
            'successful' => $successCount,
            'failed' => $errorCount,
            'errors' => $errors,
            'month' => $this->month,
        ]);
    }
}
