<?php

use Livewire\Volt\Component;
use Livewire\WithPagination;
use App\Models\Platform;
use App\Models\ImportJob;
use Carbon\Carbon;

new class extends Component {
    use WithPagination;

    // Filters
    public $platform_filter = '';
    public $account_filter = '';
    public $date_range = '';
    public $status_filter = '';
    public $search = '';

    // Stats
    public $totalImports = 0;
    public $totalOrdersImported = 0;
    public $successRate = 0;
    public $activeImports = 0;

    public function mount()
    {
        $this->loadStats();
    }

    public function loadStats()
    {
        // Get overall statistics from ImportJob model
        $this->totalImports = ImportJob::count();
        $this->totalOrdersImported = ImportJob::completed()->sum('successful_rows');
        $this->activeImports = ImportJob::whereIn('status', ['pending', 'processing'])->count();

        // Calculate success rate based on completed import jobs
        $completedImports = ImportJob::completed()->get();
        if ($completedImports->count() > 0) {
            $totalRows = $completedImports->sum('total_rows');
            $successfulRows = $completedImports->sum('successful_rows');
            $this->successRate = $totalRows > 0 ? round(($successfulRows / $totalRows) * 100, 1) : 0;
        } else {
            $this->successRate = 0;
        }
    }

    public function updatedPlatformFilter()
    {
        $this->resetPage();
        $this->account_filter = ''; // Reset account filter when platform changes
    }

    public function updatedAccountFilter()
    {
        $this->resetPage();
    }

    public function updatedDateRange()
    {
        $this->resetPage();
    }

    public function updatedStatusFilter()
    {
        $this->resetPage();
    }

    public function updatedSearch()
    {
        $this->resetPage();
    }

    public function resetFilters()
    {
        $this->platform_filter = '';
        $this->account_filter = '';
        $this->date_range = '';
        $this->status_filter = '';
        $this->search = '';
        $this->resetPage();
    }

    public function with()
    {
        // Get import jobs with filters
        $query = ImportJob::with(['platform', 'platformAccount', 'user'])
            ->recentFirst();

        // Apply platform filter
        if ($this->platform_filter) {
            $query->byPlatform($this->platform_filter);
        }

        // Apply account filter
        if ($this->account_filter) {
            $query->byPlatformAccount($this->account_filter);
        }

        // Apply status filter
        if ($this->status_filter) {
            $query->byStatus($this->status_filter);
        }

        // Apply date range filter
        if ($this->date_range) {
            switch ($this->date_range) {
                case 'today':
                    $query->whereDate('created_at', today());
                    break;
                case 'week':
                    $query->whereBetween('created_at', [now()->startOfWeek(), now()->endOfWeek()]);
                    break;
                case 'month':
                    $query->whereMonth('created_at', now()->month)
                          ->whereYear('created_at', now()->year);
                    break;
                case 'last_month':
                    $query->whereMonth('created_at', now()->subMonth()->month)
                          ->whereYear('created_at', now()->subMonth()->year);
                    break;
            }
        }

        // Apply search filter (search in file name, platform, or account names)
        if ($this->search) {
            $query->where(function($q) {
                $q->where('file_name', 'like', '%' . $this->search . '%')
                  ->orWhereHas('platform', function($subq) {
                      $subq->where('name', 'like', '%' . $this->search . '%')
                           ->orWhere('display_name', 'like', '%' . $this->search . '%');
                  })
                  ->orWhereHas('platformAccount', function($subq) {
                      $subq->where('name', 'like', '%' . $this->search . '%');
                  });
            });
        }

        return [
            'importJobs' => $query->paginate(15),
            'platforms' => Platform::orderBy('display_name')->get(),
            'accounts' => $this->platform_filter ?
                Platform::find($this->platform_filter)?->accounts()->orderBy('name')->get() ?? collect() :
                collect(),
        ];
    }

    public function retryImport($importJobId)
    {
        $importJob = ImportJob::findOrFail($importJobId);

        // Only allow retry of failed imports
        if (!$importJob->isFailed()) {
            session()->flash('error', 'Only failed imports can be retried.');
            return;
        }

        // Reset the import job status
        $importJob->update([
            'status' => 'pending',
            'status_message' => null,
            'processed_rows' => 0,
            'successful_rows' => 0,
            'failed_rows' => 0,
            'skipped_rows' => 0,
            'progress_percentage' => 0,
            'errors' => null,
            'warnings' => null,
            'started_at' => null,
            'completed_at' => null,
            'duration_seconds' => null,
        ]);

        session()->flash('success', 'Import job has been reset and queued for retry.');
        $this->loadStats();
    }

    public function cancelImport($importJobId)
    {
        $importJob = ImportJob::findOrFail($importJobId);

        // Only allow cancellation of pending or processing imports
        if (!in_array($importJob->status, ['pending', 'processing'])) {
            session()->flash('error', 'Only pending or processing imports can be cancelled.');
            return;
        }

        $importJob->markAsCancelled();
        session()->flash('success', 'Import job has been cancelled.');
        $this->loadStats();
    }

    public function deleteImport($importJobId)
    {
        $importJob = ImportJob::findOrFail($importJobId);

        // Don't allow deletion of processing imports
        if ($importJob->isProcessing()) {
            session()->flash('error', 'Cannot delete a processing import job.');
            return;
        }

        // Delete the import job file if it exists
        if ($importJob->file_path && file_exists(storage_path('app/' . $importJob->file_path))) {
            unlink(storage_path('app/' . $importJob->file_path));
        }

        $importJob->delete();
        session()->flash('success', 'Import job has been deleted.');
        $this->loadStats();
    }

    public function exportImportHistory()
    {
        $imports = ImportJob::with(['platform', 'platformAccount', 'user'])
            ->recentFirst()
            ->get();

        $csv = "Import Date,Platform,Account,File Name,Total Rows,Successful,Failed,Skipped,Status,Duration,User\n";

        foreach ($imports as $import) {
            $csv .= implode(',', [
                '"' . $import->created_at->format('Y-m-d H:i:s') . '"',
                '"' . $import->platform->display_name . '"',
                '"' . ($import->platformAccount?->name ?? 'N/A') . '"',
                '"' . $import->file_name . '"',
                $import->total_rows,
                $import->successful_rows,
                $import->failed_rows,
                $import->skipped_rows,
                '"' . ucfirst($import->status) . '"',
                '"' . ($import->formatted_duration ?? 'N/A') . '"',
                '"' . ($import->user?->name ?? 'System') . '"',
            ]) . "\n";
        }

        return response()->streamDownload(function() use ($csv) {
            echo $csv;
        }, "import-history-" . now()->format('Y-m-d') . ".csv", [
            'Content-Type' => 'text/csv',
        ]);
    }
}; ?>

<div>
    {{-- Header Section --}}
    <div class="mb-6 flex items-center justify-between">
        <div>
            <flux:heading size="xl">Import History & Logs</flux:heading>
            <flux:text class="mt-2">Track and monitor all platform order imports</flux:text>
        </div>
        <div class="flex gap-3">
            <flux:button variant="outline" wire:click="exportImportHistory">
                <div class="flex items-center justify-center">
                    <flux:icon name="arrow-down-tray" class="w-4 h-4 mr-1" />
                    Export History
                </div>
            </flux:button>
            <flux:button variant="primary" :href="route('platforms.index')" wire:navigate>
                <div class="flex items-center justify-center">
                    <flux:icon name="squares-2x2" class="w-4 h-4 mr-1" />
                    Manage Platforms
                </div>
            </flux:button>
        </div>
    </div>

    {{-- Stats Cards --}}
    <div class="mb-6 grid grid-cols-1 md:grid-cols-4 gap-4">
        <div class="bg-white rounded-lg border p-4">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                        <flux:icon name="arrow-up-tray" class="w-4 h-4 text-blue-600" />
                    </div>
                </div>
                <div class="ml-3">
                    <flux:text size="sm" class="text-zinc-600">Total Imports</flux:text>
                    <flux:text class="font-semibold">{{ number_format($totalImports) }}</flux:text>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg border p-4">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                        <flux:icon name="shopping-bag" class="w-4 h-4 text-purple-600" />
                    </div>
                </div>
                <div class="ml-3">
                    <flux:text size="sm" class="text-zinc-600">Records Imported</flux:text>
                    <flux:text class="font-semibold">{{ number_format($totalOrdersImported) }}</flux:text>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg border p-4">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                        <flux:icon name="check-circle" class="w-4 h-4 text-green-600" />
                    </div>
                </div>
                <div class="ml-3">
                    <flux:text size="sm" class="text-zinc-600">Success Rate</flux:text>
                    <flux:text class="font-semibold">{{ number_format($successRate, 1) }}%</flux:text>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg border p-4">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="w-8 h-8 bg-amber-100 rounded-lg flex items-center justify-center">
                        <flux:icon name="clock" class="w-4 h-4 text-amber-600" />
                    </div>
                </div>
                <div class="ml-3">
                    <flux:text size="sm" class="text-zinc-600">Active Imports</flux:text>
                    <flux:text class="font-semibold">{{ number_format($activeImports) }}</flux:text>
                </div>
            </div>
        </div>
    </div>

    {{-- Filters --}}
    <div class="mb-6 bg-white rounded-lg border p-4">
        <div class="grid grid-cols-1 md:grid-cols-6 gap-4">
            <div>
                <flux:field>
                    <flux:label>Search</flux:label>
                    <flux:input wire:model.live.debounce.300ms="search" placeholder="Platform, account..." />
                </flux:field>
            </div>

            <div>
                <flux:field>
                    <flux:label>Platform</flux:label>
                    <flux:select wire:model.live="platform_filter">
                        <flux:option value="">All Platforms</flux:option>
                        @foreach($platforms as $platform)
                            <flux:option value="{{ $platform->id }}">{{ $platform->display_name }}</flux:option>
                        @endforeach
                    </flux:select>
                </flux:field>
            </div>

            <div>
                <flux:field>
                    <flux:label>Account</flux:label>
                    <flux:select wire:model.live="account_filter">
                        <flux:option value="">All Accounts</flux:option>
                        @foreach($accounts as $account)
                            <flux:option value="{{ $account->id }}">{{ $account->name }}</flux:option>
                        @endforeach
                    </flux:select>
                </flux:field>
            </div>

            <div>
                <flux:field>
                    <flux:label>Date Range</flux:label>
                    <flux:select wire:model.live="date_range">
                        <flux:option value="">All Time</flux:option>
                        <flux:option value="today">Today</flux:option>
                        <flux:option value="week">This Week</flux:option>
                        <flux:option value="month">This Month</flux:option>
                        <flux:option value="last_month">Last Month</flux:option>
                    </flux:select>
                </flux:field>
            </div>

            <div>
                <flux:field>
                    <flux:label>Status</flux:label>
                    <flux:select wire:model.live="status_filter">
                        <flux:option value="">All Status</flux:option>
                        <flux:option value="pending">Pending</flux:option>
                        <flux:option value="processing">Processing</flux:option>
                        <flux:option value="completed">Completed</flux:option>
                        <flux:option value="failed">Failed</flux:option>
                        <flux:option value="cancelled">Cancelled</flux:option>
                    </flux:select>
                </flux:field>
            </div>

            <div class="flex items-end">
                <flux:button variant="outline" wire:click="resetFilters" class="w-full">
                    <div class="flex items-center justify-center">
                        <flux:icon name="arrow-path" class="w-4 h-4 mr-1" />
                        Reset
                    </div>
                </flux:button>
            </div>
        </div>
    </div>

    {{-- Import History Table --}}
    <div class="bg-white rounded-lg border overflow-hidden">
        @if($importJobs->count() > 0)
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Import Details</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Platform & Account</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach($importJobs as $job)
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div>
                                        <flux:text class="font-medium">{{ $job->file_name }}</flux:text>
                                        <flux:text size="sm" class="text-zinc-600">{{ $job->created_at->format('M j, Y g:i A') }}</flux:text>
                                        <flux:text size="sm" class="text-zinc-500">{{ $job->created_at->diffForHumans() }}</flux:text>
                                        @if($job->user)
                                            <flux:text size="sm" class="text-zinc-400">by {{ $job->user->name }}</flux:text>
                                        @endif
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        @if($job->platform->logo_url)
                                            <img src="{{ $job->platform->logo_url }}" alt="{{ $job->platform->name }}" class="w-6 h-6 rounded mr-3">
                                        @else
                                            <div class="w-6 h-6 rounded flex items-center justify-center text-white text-xs font-bold mr-3"
                                                 style="background: {{ $job->platform->color_primary ?? '#6b7280' }}">
                                                {{ substr($job->platform->name, 0, 1) }}
                                            </div>
                                        @endif
                                        <div>
                                            <flux:text size="sm" class="font-medium">{{ $job->platform->display_name }}</flux:text>
                                            <flux:text size="sm" class="text-zinc-600">{{ $job->platformAccount?->name ?? 'No Account' }}</flux:text>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div>
                                        @if($job->total_rows > 0)
                                            <div class="flex items-center space-x-2">
                                                <div class="flex-1">
                                                    <div class="w-full bg-gray-200 rounded-full h-2">
                                                        <div class="bg-blue-600 h-2 rounded-full" style="width: {{ $job->progress_percentage }}%"></div>
                                                    </div>
                                                </div>
                                                <flux:text size="sm" class="text-zinc-600">{{ $job->progress_percentage }}%</flux:text>
                                            </div>
                                            <div class="mt-1">
                                                <flux:text size="sm" class="text-green-600">{{ number_format($job->successful_rows) }} success</flux:text>
                                                @if($job->failed_rows > 0)
                                                    <flux:text size="sm" class="text-red-600">{{ number_format($job->failed_rows) }} failed</flux:text>
                                                @endif
                                                @if($job->skipped_rows > 0)
                                                    <flux:text size="sm" class="text-yellow-600">{{ number_format($job->skipped_rows) }} skipped</flux:text>
                                                @endif
                                            </div>
                                        @else
                                            <flux:text size="sm" class="text-zinc-500">{{ number_format($job->total_rows) }} rows</flux:text>
                                        @endif
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div>
                                        <flux:text class="font-medium">{{ $job->formatted_duration }}</flux:text>
                                        @if($job->started_at)
                                            <flux:text size="sm" class="text-zinc-600">Started {{ $job->started_at->format('g:i A') }}</flux:text>
                                        @endif
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <flux:badge size="sm" :color="$job->status_color">
                                        {{ ucfirst($job->status) }}
                                    </flux:badge>
                                    @if($job->hasErrors())
                                        <flux:badge size="sm" color="red" class="ml-1">
                                            {{ count($job->errors ?? []) }} errors
                                        </flux:badge>
                                    @endif
                                    @if($job->hasWarnings())
                                        <flux:badge size="sm" color="yellow" class="ml-1">
                                            {{ count($job->warnings ?? []) }} warnings
                                        </flux:badge>
                                    @endif
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex space-x-2">
                                        @if($job->isFailed())
                                            <flux:button variant="ghost" size="sm" wire:click="retryImport({{ $job->id }})">
                                                <div class="flex items-center justify-center">
                                                    <flux:icon name="arrow-path" class="w-4 h-4 mr-1" />
                                                    Retry
                                                </div>
                                            </flux:button>
                                        @endif

                                        @if(in_array($job->status, ['pending', 'processing']))
                                            <flux:button variant="ghost" size="sm" wire:click="cancelImport({{ $job->id }})">
                                                <div class="flex items-center justify-center">
                                                    <flux:icon name="x-mark" class="w-4 h-4 mr-1" />
                                                    Cancel
                                                </div>
                                            </flux:button>
                                        @endif

                                        @if(!$job->isProcessing())
                                            <flux:button variant="ghost" size="sm" wire:click="deleteImport({{ $job->id }})" wire:confirm="Are you sure you want to delete this import job?">
                                                <div class="flex items-center justify-center">
                                                    <flux:icon name="trash" class="w-4 h-4 mr-1" />
                                                    Delete
                                                </div>
                                            </flux:button>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>

            {{-- Pagination --}}
            <div class="px-6 py-3 border-t border-gray-200">
                {{ $importJobs->links() }}
            </div>
        @else
            <div class="p-12 text-center">
                <div class="mx-auto w-12 h-12 bg-zinc-100 rounded-lg flex items-center justify-center mb-4">
                    <flux:icon name="arrow-up-tray" class="w-6 h-6 text-zinc-400" />
                </div>
                <flux:heading size="lg" class="mb-2">No Import History</flux:heading>
                <flux:text class="text-zinc-600 mb-4">
                    @if($search || $platform_filter || $account_filter || $date_range)
                        No imports match your current filters. Try adjusting your search criteria.
                    @else
                        You haven't imported any orders yet. Start by setting up a platform and importing orders.
                    @endif
                </flux:text>
                @if(!$search && !$platform_filter && !$account_filter && !$date_range)
                    <flux:button variant="primary" :href="route('platforms.index')" wire:navigate>
                        <div class="flex items-center justify-center">
                            <flux:icon name="plus" class="w-4 h-4 mr-1" />
                            Get Started
                        </div>
                    </flux:button>
                @else
                    <flux:button variant="outline" wire:click="resetFilters">
                        <div class="flex items-center justify-center">
                            <flux:icon name="arrow-path" class="w-4 h-4 mr-1" />
                            Clear Filters
                        </div>
                    </flux:button>
                @endif
            </div>
        @endif
    </div>
</div>